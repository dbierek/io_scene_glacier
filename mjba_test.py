import os
import sys
import json
from io_binary import BinaryReader
from mjba_reader import Mjba

if len(sys.argv) > 1:
	mjba_file = sys.argv[1]
	with open(mjba_file, "rb") as f:
		mjba = Mjba(BinaryReader(f))
		# debug output below
		print("mjba.mjba_header.mrtr_index:")
		print(mjba.mjba_header.mrtr_index)
		print()
		print()
		print()
		print()
		print("mjba.mjba_header.atmd_index:")
		print(mjba.mjba_header.atmd_index)
		print()
		print()
		print()
		print()
		print("mjba.mjba_header.mjba_transform_matrix:")
		print(mjba.mjba_header.mjba_transform_matrix)
		print()
		print()
		print()
		print()
		print("mjba.variable_fps.header_size:")
		print(mjba.variable_fps.header_size)
		print()
		print()
		print()
		print()
		print("mjba.variable_fps.frame_count:")
		print(mjba.variable_fps.frame_count)
		print()
		print()
		print()
		print()
		print("mjba.variable_fps.mjba_fps:")
		print(mjba.variable_fps.mjba_fps)
		print()
		print()
		print()
		print()
		if mjba.variable_fps.header_size:
			print("mjba.variable_fps.fps:")
			print(mjba.variable_fps.fps)
			print()
			print()
			print()
			print()
		print("mjba.unknown_float_data.first_size:")
		print(mjba.unknown_float_data.first_size)
		print()
		print()
		print()
		print()
		print("mjba.unknown_float_data.second_size:")
		print(mjba.unknown_float_data.second_size)
		print()
		print()
		print()
		print()
		if mjba.unknown_float_data.first_size:
			print("mjba.unknown_float_data.float_data:")
			print(mjba.unknown_float_data.float_data)
			print()
			print()
			print()
			print()
		print("mjba.mrtr_bone_map.fps:")
		print(mjba.mrtr_bone_map.fps)
		print()
		print()
		print()
		print()
		print("mjba.mrtr_bone_map.mrtr_bone_count:")
		print(mjba.mrtr_bone_map.mrtr_bone_count)
		print()
		print()
		print()
		print()
		print("mjba.mrtr_bone_map.used_bone_count:")
		print(mjba.mrtr_bone_map.used_bone_count)
		print()
		print()
		print()
		print()
		print("mjba.mrtr_bone_map.mrtr_bone_offset:")
		print(mjba.mrtr_bone_map.mrtr_bone_offset)
		print()
		print()
		print()
		print()
		print("mjba.mrtr_bone_map.used_bone_offset:")
		print(mjba.mrtr_bone_map.used_bone_offset)
		print()
		print()
		print()
		print()
		print("mjba.mrtr_bone_map.mrtr_bone_indices:")
		print(mjba.mrtr_bone_map.mrtr_bone_indices)
		print()
		print()
		print()
		print()
		print("mjba.mrtr_bone_map.used_bone_indices:")
		print(mjba.mrtr_bone_map.used_bone_indices)
		print()
		print()
		print()
		print()
		print("mjba.animation.duration:")
		print(mjba.animation.duration)
		print()
		print()
		print()
		print()
		print("mjba.animation.used_bone_count:")
		print(mjba.animation.used_bone_count)
		print()
		print()
		print()
		print()
		print("mjba.animation.frame_count_1:")
		print(mjba.animation.frame_count_1)
		print()
		print()
		print()
		print()
		print("mjba.animation.fps:")
		print(mjba.animation.fps)
		print()
		print()
		print()
		print()
		print("mjba.animation.animation_data_size:")
		print(mjba.animation.animation_data_size)
		print()
		print()
		print()
		print()
		print("mjba.animation.frame_count_1:")
		print(mjba.animation.frame_count_1)
		print()
		print()
		print()
		print()
		print("mjba.animation.static_quaternion_bone_count:")
		print(mjba.animation.static_quaternion_bone_count)
		print()
		print()
		print()
		print()
		print("mjba.animation.static_transform_bone_count:")
		print(mjba.animation.static_transform_bone_count)
		print()
		print()
		print()
		print()
		print("mjba.animation.transform_scale:")
		print(mjba.animation.transform_scale)
		print()
		print()
		print()
		print()
		print("mjba.animation.has_bind_poses:")
		print(mjba.animation.has_bind_poses)
		print()
		print()
		print()
		print()
		print("mjba.animation.bones_with_static_quaternions:")
		print(mjba.animation.bones_with_static_quaternions)
		print()
		print()
		print()
		print()
		print("mjba.animation.bones_with_static_transforms:")
		print(mjba.animation.bones_with_static_transforms)
		print()
		print()
		print()
		print()
		if mjba.animation.has_bind_poses:
			print("mjba.animation.bones_with_static_bind_poses:")
			print(mjba.animation.bones_with_static_bind_poses)
			print()
			print()
			print()
			print()
		print("mjba.animation.static_bone_quaternions:")
		print(mjba.animation.static_bone_quaternions)
		print()
		print()
		print()
		print()
		print("mjba.animation.dynamic_bone_quaternions:")
		print(mjba.animation.dynamic_bone_quaternions)
		print()
		print()
		print()
		print()
		if mjba.animation.has_bind_poses:
			print("mjba.animation.bone_bind_poses_quaternions:")
			print(mjba.animation.bone_bind_poses_quaternions)
			print()
			print()
			print()
			print()
		print("mjba.animation.static_bone_transforms:")
		print(mjba.animation.static_bone_transforms)
		print()
		print()
		print()
		print()
		print("mjba.animation.dynamic_bone_transforms:")
		print(mjba.animation.dynamic_bone_transforms)
		print()
		print()
		print()
		print()
		if mjba.animation.has_bind_poses:
			print("mjba.animation.bone_bind_poses_transforms:")
			print(mjba.animation.bone_bind_poses_transforms)
			print()
			print()
			print()
			print()
		print("mjba.animation.world_transforms:")
		print(mjba.animation.world_transforms)
		print()
		print()
		print()
		print()

else:
	print("Usage: mjba.py <MJBA file>")